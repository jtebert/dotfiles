#!/usr/bin/python3

# NOTE: This uses the `ffmpeg-python` library (here: https://kkroening.github.io/ffmpeg-python/).
# This is different from alternatives available on pypi/pip: ffmpeg or python-ffmpeg.

import glob
import argparse
import os

import ffmpeg


def compress(in_file, args):
    # ffmpeg -i "$f" -ss "$START_T" -to "$END_T" -vcodec h264 -vf scale=$res_width:-1 -an $out_dir/$name.mp4;

    # Generate the output file name
    in_filename = os.path.split(in_file)[-1]
    out_filename = os.path.join(args.out_dir, in_filename)

    stream = ffmpeg.input(in_file).video
    # Trim video
    if args.end:
        stream = stream.trim(end=args.end)
    if args.start:
        stream = stream.trim(start=args.start)
        # Reset start time if it's been changed
        stream = stream.setpts('PTS-STARTPTS')
    # Set to the specified resolution
    stream = stream.filter('scale', args.width, -1)
    # Speed up (possibly)
    if args.speed:
        stream = stream.setpts(f'{1/args.speed}*PTS')

    # Set output to have the right formats
    stream = ffmpeg.output(stream, out_filename, vcodec='h264', pix_fmt='yuv420p')
    # Save, possibly with overwrite (depending on optional input arg)
    ffmpeg.run(stream, overwrite_output=args.overwrite)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Compress multiple videos")
    parser.add_argument('in_files', type=str,
                        help='wildcard video paths')
    parser.add_argument('out_dir', type=str,
                        help='output directory for compressed videos')
    parser.add_argument('width', type=int,
                        help='width of output video(s)')
    parser.add_argument('--start',
                        help='start time for trimming video (optional)')
    parser.add_argument('--end',
                        help='end time for trimming video (optional)')
    parser.add_argument('--overwrite', action='store_true',
                        help='whether to overwrite existing outputs (optional, default is False)')
    parser.add_argument('--speed',
                        type=float,
                        help='scale of how much to speed up/slow down the video (optional)')

    args = parser.parse_args()

    # Quit if no matching files are found
    in_files = glob.glob(args.in_files)
    if len(in_files) == 0:
        print("No videos found")
        exit(1)

    # Create the output directory, if it doesn't already exist
    try:
        os.mkdir(args.out_dir)
    except OSError as error:
        print(error)

    # Process all files
    for in_file in in_files:
        compress(in_file, args)
